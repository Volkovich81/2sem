#define _CRT_SECURE_NO_WARNINGS

/*
Лабораторная работа No3. Поля бит. Структуры.
Задание 2: Работа со структурой сериалов через динамический массив.
Студент: Волкович Ника
Дата: 31.03.2025
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include "tvshow.h"

#define FILENAME "tvshows.txt"
#define BUFFER_SIZE 100

int main(void) {
    // Устанавливаем русскую локаль без проверки результата
    setlocale(LC_ALL, "Rus");

    TVShow* shows = NULL;  // Указатель на динамический массив сериалов
    int count = 0;         // Количество сериалов
    int choice;            // Выбор пункта меню
    char buffer[BUFFER_SIZE];

    // Основной цикл меню программы
    while (1) {
        printf("\n======== МЕНЮ ========\n");
        printf("1. Добавить новый сериал\n");
        printf("2. Вывести список всех сериалов\n");
        printf("3. Поиск сериалов (количество серий меньше заданного)\n");
        printf("4. Удалить сериал(ы) по названию\n");
        printf("5. Сортировать сериалы по количеству серий\n");
        printf("6. Сохранить список сериалов в файл\n");
        printf("7. Загрузить список сериалов из файла\n");
        printf("8. Выход\n");
        printf("Выберите пункт меню (1-8): ");

        if (scanf_s("%d", &choice) != 1) {
            printf("Ошибка ввода! Введите число от 1 до 8.\n");
            while (getchar() != '\n');  // Очищаем поток
            continue;
        }
        while (getchar() != '\n');  // Очищаем остаток после ввода числа

        switch (choice) {
        case 1: {
            // Расширяем динамический массив для нового сериала с явным приведением типа
            TVShow* temp = (TVShow*)realloc(shows, (count + 1) * sizeof(TVShow));
            if (!temp) {
                printf("Ошибка выделения памяти!\n");
                break;
            }
            shows = temp;
            printf("\n--- Ввод данных нового сериала ---\n");
            inputTVShowFields(&shows[count]);

            // Ввод даты выхода сериала
            printf("Введите дату выхода (формат dd.mm.yyyy): ");
            if (fgets(buffer, BUFFER_SIZE, stdin) == NULL) {
                printf("Ошибка ввода даты!\n");
                exit(EXIT_FAILURE);
            }
            buffer[strcspn(buffer, "\n")] = '\0';
            strncpy(shows[count].relDate.date, buffer, DATE_LENGTH - 1);
            shows[count].relDate.date[DATE_LENGTH - 1] = '\0';

            // Ввод количества сезонов
            printf("Введите количество сезонов: ");
            while (scanf_s("%d", &shows[count].numSeasons) != 1) {
                printf("Ошибка ввода! Введите целое число для количества сезонов: ");
                while (getchar() != '\n');
            }
            while (getchar() != '\n');
            count++;
            break;
        }
        case 2: {
            printf("\n--- Список всех сериалов ---\n");
            if (count == 0) {
                printf("Список сериалов пуст.\n");
            }
            else {
                for (int i = 0; i < count; i++) {
                    printf("----------------------------\n");
                    printf("Сериал №%d:\n", i + 1);
                    printf("Количество серий: %d\n", shows[i].numEpisodes);
                    printf("Название: %s\n", shows[i].title);
                    printf("Дата выхода: %s\n", shows[i].relDate.date);
                    printf("Количество сезонов: %d\n", shows[i].numSeasons);
                }
            }
            break;
        }
        case 3: {
            if (count == 0) {
                printf("Список сериалов пуст.\n");
            }
            else {
                int threshold;
                printf("Введите порог количества серий: ");
                while (scanf_s("%d", &threshold) != 1) {
                    printf("Ошибка ввода! Введите целое число: ");
                    while (getchar() != '\n');
                }
                while (getchar() != '\n');
                searchTVShowsByEpisodes(shows, count, threshold);
            }
            break;
        }
        case 4: {
            if (count == 0) {
                printf("Список сериалов пуст.\n");
            }
            else {
                printf("Введите название сериала для удаления: ");
                if (fgets(buffer, BUFFER_SIZE, stdin) == NULL) {
                    printf("Ошибка ввода!\n");
                    break;
                }
                buffer[strcspn(buffer, "\n")] = '\0';
                int oldCount = count;
                deleteTVShowsByTitle(shows, &count, buffer);
                if (oldCount == count)
                    printf("Сериал с названием \"%s\" не найден.\n", buffer);
                else
                    printf("Сериал(ы) с названием \"%s\" удалены.\n", buffer);
            }
            break;
        }
        case 5: {
            if (count == 0) {
                printf("Список сериалов пуст.\n");
            }
            else {
                sortTVShowsByEpisodes(shows, count);
                printf("Сериалы отсортированы по количеству серий.\n");
            }
            break;
        }
        case 6: {
            saveTVShowsToFile(shows, count, FILENAME);
            break;
        }
        case 7: {
            if (count > 0) {
                freeTVShows(shows, count);
                shows = NULL;
                count = 0;
            }
            count = loadTVShowsFromFile(&shows, FILENAME);
            break;
        }
        case 8: {
            freeTVShows(shows, count);
            printf("Выход из программы.\n");
            return 0;
        }
        default:
            printf("Неверный выбор. Введите число от 1 до 8.\n");
            break;
        }
    }

    return 0;
}
